function roiImage=drawZeissRois(varargin)
% The function displays ROIs extracted from a Zeiss CZI file by the
% extractZeissRois function.
% roiImage=drawZeissRois(roiStructure, imageSize, outputType, filled, separateImages)
% OR
% roiImage=drawZeissRois(roiStructure, imageSize) defaults to 'dipimage' output type, filled ROIs in one image.
%
% roiStructure - a structure variable generated by extractZeissRois
% imageSize - a two-element array: [xSize,ySize], i.e. [horizontalSize,verticalSize]
% outputType - 'dipimage' or 'matlab' corresponding to a dip_image or a matlab numeric array, respectively
% filled - 1 or 0 corresponding to filled ROIs or only their circumference
% separateImage - 1 if each ROI is to be saved in a separate image. Otherwise all ROIs will be drawn in the same image.
%
% Peter Nagy, email: peter.v.nagy@gmail.com, https://peternagy.webs.com/
% V1.öö
if nargin==2
    roiStructure=varargin{1};
    imageSize=varargin{2};
    outputType='dipimage';
    filled=true;
    separateImages=false;
else
    roiStructure=varargin{1};
    imageSize=varargin{2};
    outputType=varargin{3};
    filled=varargin{4};
    separateImages=varargin{5};
end
if separateImages==1
    roiImage=zeros(imageSize(2),imageSize(1),numel(roiStructure));
else
    roiImage=zeros(imageSize(2),imageSize(1));
end
for i=1:numel(roiStructure)
    switch roiStructure(i).roiType
        case 'Rectangle'
            roiX=[roiStructure(i).roiData.Left roiStructure(i).roiData.Left roiStructure(i).roiData.Left+roiStructure(i).roiData.Width roiStructure(i).roiData.Left+roiStructure(i).roiData.Width];
            roiY=[roiStructure(i).roiData.Top roiStructure(i).roiData.Top+roiStructure(i).roiData.Height roiStructure(i).roiData.Top+roiStructure(i).roiData.Height roiStructure(i).roiData.Top];
        case 'Circle'
            angles=linspace(0,2*pi-2*pi/720,720);
            roiX=roiStructure(i).roiData.Radius*sin(angles)+roiStructure(i).roiData.CenterX;
            roiY=roiStructure(i).roiData.Radius*cos(angles)+roiStructure(i).roiData.CenterY;
        case 'Ellipse'
            a=roiStructure(i).roiData.RadiusX;
            b=roiStructure(i).roiData.RadiusY;
            angles=linspace(0,2*pi-2*pi/720,720);
            X=a*cos(angles);
            Y=b*sin(angles);
            rotation=roiStructure(i).roiData.Rotation*2*pi/360;
            roiX=roiStructure(i).roiData.CenterX+X*cos(rotation)-Y*sin(rotation);
            roiY=roiStructure(i).roiData.CenterY+X*sin(rotation)+Y*cos(rotation);
        case 'Polygon'
            roiX=roiStructure(i).roiData.Points(:,1);
            roiY=roiStructure(i).roiData.Points(:,2);
        case 'Bezier'
            points=getSplinePoints(roiStructure(i).roiData.Points)';
            roiX=points(:,1);
            roiY=points(:,2);
    end
    if filled==1
        [coord1,coord2]=meshgrid(1:imageSize(2),1:imageSize(1));
        coord1=reshape(coord1,numel(coord1),1);
        coord2=reshape(coord2,numel(coord2),1);
        insideIndices=inpolygon(coord1,coord2,roiX,roiY);
        currentRoi=reshape(insideIndices,imageSize(2),imageSize(1));
    else
        if iscolumn(roiX)
            roiX=[roiX;roiX(1)];
            roiY=[roiY;roiY(1)];
        else
            roiX=[roiX,roiX(1)];
            roiY=[roiY,roiY(1)];
        end
        [lineX,lineY]=line2Dcoordinates(roiX,roiY);
        currentRoi=zeros(imageSize(2),imageSize(1));
        if sum((round(lineX)-1)*imageSize(2)+round(lineY)>imageSize(1)*imageSize(2))==0 &&...
                sum((round(lineX)-1)*imageSize(2)+round(lineY)<0)==0 && sum(round(lineX)<0)==0 && sum(round(lineY)<0)==0
            pixelIndices=sub2ind([imageSize(2) imageSize(1)],round(lineY),round(lineX));
            currentRoi(pixelIndices)=1;
        end
    end
    if separateImages==1
        roiImage(:,:,i)=currentRoi;
    else
        roiImage=roiImage | currentRoi;
    end
end
if strcmp(outputType,'dipimage')
    roiImage=dip_image(roiImage);
end
function points=getSplinePoints(xy)
xy=[xy;xy(1,:)];
sp=cscvn(xy');
[points]=fnplt(sp,'r',2);
function [lineX,lineY]=line2Dcoordinates(x,y)
for i=1:numel(x)-1
    point1=[x(i) y(i)];
    point2=[x(i+1) y(i+1)];
    lengthOfLine=sqrt(sum((point1-point2).^2));
    t=linspace(0,1,lengthOfLine*10);
    coordinates=repmat(point1,length(t),1)'+(point2-point1)'*t;
    coordinates=round(coordinates)';
    if i==1
        coordinatesXY=coordinates;
    else
        coordinatesXY=[coordinatesXY;coordinates(2:end,:)];
    end
end
coordinatesXY=coordinatesXY(sum(diff([0 0;coordinatesXY]),2)~=0,:);
lineX=coordinatesXY(:,1);
lineY=coordinatesXY(:,2);